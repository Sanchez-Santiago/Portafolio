---
// Importaciones necesarias
import { Swiper } from "swiper";
import "swiper/css";
import "swiper/css/effect-cards";
import { EffectCards } from "swiper/modules";
import {
  faPlay,
  faPause,
  faForward,
  faBackward,
  faShuffle,
  faVolumeHigh,
  faHeart as solidHeart,
} from "@fortawesome/free-solid-svg-icons";
import { faHeart as regularHeart } from "@fortawesome/free-regular-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";

// Tipos para TypeScript
type Song = {
  url: string;
  artist: string;
  title: string;
  duration: string;
  cover: string;
};

// Datos de las canciones
const songs: Song[] = [
  {
    url: "https://github.com/ecemgo/mini-samples-great-tricks/raw/main/song-list/SynCole-FeelGood.mp3",
    artist: "Syn Cole",
    title: "Feel Good",
    duration: "3:01",
    cover:
      "https://github.com/user-attachments/assets/d80e6b68-b67a-4e27-86ee-e00581883d5c",
  },
  {
    url: "https://github.com/ecemgo/mini-samples-great-tricks/raw/main/song-list/HarddopeClarx-Castle.mp3",
    artist: "Clarx & Harddope",
    title: "Castle",
    duration: "2:38",
    cover:
      "https://github.com/user-attachments/assets/9240f7ff-1b8e-4e62-a2d1-df78b285c7e0",
  },
  {
    url: "https://github.com/ecemgo/mini-samples-great-tricks/raw/main/song-list/PlayDead-NEFFEX.mp3",
    artist: "Neffex",
    title: "Play Dead",
    duration: "3:31",
    cover:
      "https://github.com/user-attachments/assets/6e5ba953-49c5-4634-a1c5-4caf310cba86",
  },
  {
    url: "https://github.com/ecemgo/mini-samples-great-tricks/raw/main/song-list/KnowMyself-PatrickPatrikios.mp3",
    artist: "Patrick Patrikios",
    title: "Know Myself",
    duration: "3:23",
    cover:
      "https://github.com/user-attachments/assets/a2ca0dfd-e53f-4e79-b8b0-288847e59b9a",
  },
  {
    url: "https://github.com/ecemgo/mini-samples-great-tricks/raw/main/song-list/BesomorphCoopex-Redemption.mp3",
    artist: "Besomorph & Coopex",
    title: "Redemption",
    duration: "2:37",
    cover:
      "https://github.com/user-attachments/assets/b286d7ff-52a1-452d-9cd9-5920c937b16e",
  },
];
---

<!-- Componente principal -->
<div class="music-player">
  <div class="content">
    <div class="slider-playlist">
      <!-- Slider de canciones -->
      <div class="swiper">
        <div class="swiper-wrapper">
          {
            songs.map((song) => (
              <div class="swiper-slide">
                <img src={song.cover} alt={`${song.artist} - ${song.title}`} />
                <h1>{song.artist}</h1>
              </div>
            ))
          }
        </div>
      </div>

      <!-- Lista de reproducciÃ³n -->
      <div class="playlist">
        {
          songs.map((song, index) => (
            <div class="playlist-item" data-index={index}>
              <img src={song.cover} alt={`${song.artist} - ${song.title}`} />
              <div class="song">
                <p>{song.artist}</p>
                <p>{song.title}</p>
              </div>
              <p>{song.duration}</p>
              <button class="like-btn">
                <FontAwesomeIcon icon={regularHeart} />
              </button>
            </div>
          ))
        }
      </div>
    </div>

    <!-- Controles del reproductor -->
    <div class="player">
      <audio id="audioPlayer" src={songs[0].url} type="audio/mpeg"></audio>

      <div class="controls">
        <button id="shuffleBtn">
          <FontAwesomeIcon icon={faShuffle} />
        </button>
        <button id="prevBtn">
          <FontAwesomeIcon icon={faBackward} />
        </button>
        <button id="playPauseBtn">
          <FontAwesomeIcon icon={faPlay} id="playPauseIcon" />
        </button>
        <button id="nextBtn">
          <FontAwesomeIcon icon={faForward} />
        </button>
        <div class="volume">
          <FontAwesomeIcon icon={faVolumeHigh} />
          <input type="range" id="volume-range" min="0" max="100" value="100" />
        </div>
      </div>

      <input type="range" value="0" id="progress-bar" />
    </div>
  </div>
</div>

<!-- Estilos del componente -->
<style>
  @import url("https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&family=Permanent+Marker&display=swap");

  :root {
    --light-clr: #e5e5e5;
    --primary-clr: #6490f6;
    --secondary-clr: #c1daff;
    --active-clr: rgba(149, 153, 186, 0.4);
    --player-bg: rgba(5, 9, 51, 0.4);
    --scrollbar-track: rgb(79, 78, 78);
    --scrollbar-thumb: rgb(116, 116, 116);
  }

  *,
  *::before,
  *::after {
    box-sizing: border-box;
    padding: 0;
    margin: 0;
  }

  img {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover;
    user-select: none;
  }

  h1 {
    font-size: clamp(0.8rem, 3vw, 1rem);
  }

  p {
    font-size: clamp(0.7rem, 3vw, 1rem);
  }

  body {
    font-family: "Nunito", sans-serif;
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100vh;
    /* 
  background: rgb(122, 116, 191);
  background: radial-gradient(
    circle at 50% 10%,
    rgba(122, 116, 191, 1) 0%,
    rgba(0, 17, 36, 1) 76%
  ); 
  */
    background: #001124;
    background-image: url(https://github.com/user-attachments/assets/47953c98-49f4-4a40-8b2f-36543a0dd1a3);
    background-repeat: no-repeat;
    background-size: cover;
  }

  main {
    position: relative;
    width: 90%;
    height: 90%;
    background: transparent;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.4);
    border-radius: 15px;
    overflow: hidden;
  }

  main::after,
  main::before {
    content: "";
    position: absolute;
    width: 250px;
    aspect-ratio: 1/1;
    border-radius: 50%;
    transition: 5s ease-in-out;
  }

  main::after {
    top: -3%;
    left: -5%;
    transform: scale(1);
    background-color: #5768af;
  }

  main:hover::after {
    left: 85%;
    transform: scale(1.2);
    background-color: #a0acbd;
  }

  main::before {
    bottom: -3%;
    right: -5%;
    transform: scale(1);
    background-color: #ab4c72;
  }

  main:hover::before {
    right: 85%;
    transform: scale(1.2);
    background-color: #bda5ad;
  }

  /** CONTENT */

  .content {
    position: absolute;
    inset: 0;
    width: 100%;
    height: 100%;
    display: grid;
    grid-template-columns: 100%;
    place-items: center;
    background: rgba(53, 54, 72, 0.2);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.5);
    border-radius: inherit;
    box-shadow:
      0 0.5px 0 1px rgba(255, 255, 255, 0.2) inset,
      0 1px 0 0 rgba(255, 255, 255, 0.6) inset,
      0 4px 16px rgba(0, 0, 0, 0.1);
    z-index: 10;
    color: var(--light-clr);
    overflow-y: auto;
    padding: 30px 30px 10px;
  }

  .content::-webkit-scrollbar {
    width: 7px;
  }

  .content::-webkit-scrollbar-track {
    box-shadow: inset 0 0 0.3rem var(--scrollbar-track);
    border-radius: 40px;
    margin: 18px 0;
  }

  .content::-webkit-scrollbar-thumb {
    box-shadow: inset 0 0 0.5rem var(--scrollbar-thumb);
    background-color: var(--primary-clr);
    outline: none;
    border-radius: 40px;
  }

  /** PLAYLIST */

  .slider-playlist {
    display: grid;
    grid-template-columns: 45% 55%;
    align-items: center;
  }

  /** Slider */

  .swiper {
    width: 300px;
    height: auto;
  }

  .swiper-slide {
    display: grid;
    grid-template-rows: 4fr 1fr;
    padding: 15px;
    border-radius: 10px;
    background-color: #d3d2d6;
    box-shadow:
      0 0.5px 0 1px rgba(255, 255, 255, 0.2) inset,
      0 1px 0 0 rgba(255, 255, 255, 0.6) inset,
      0 4px 16px rgba(0, 0, 0, 0.1);
    user-select: none;
  }

  .swiper-slide img {
    aspect-ratio: 1/1;
    border-radius: 5px;
    margin-bottom: 14px;
    pointer-events: none;
  }

  .swiper-slide h1 {
    width: max-content;
    font-family: "Permanent Marker", serif;
    letter-spacing: 2px;
    color: #222224;
    text-transform: uppercase;
    transform: rotate(-3deg);
    margin: auto;
  }

  /** Playlist */

  .playlist {
    width: 100%;
  }

  .playlist-item {
    display: grid;
    grid-template-columns: 15% 65% 15% 5%;
    align-items: center;
    width: 100%;
    height: auto;
    padding: 8px 10px;
    margin-bottom: 15px;
    border-bottom: 2px solid var(--primary-clr);
    color: var(--light-clr);
    cursor: pointer;
    user-select: none;
  }

  .playlist-item img {
    width: 70%;
    aspect-ratio: 1/1;
    border-radius: 5px;
    overflow: hidden;
  }

  .playlist-item .song p:nth-child(1) {
    font-weight: 500;
    margin-bottom: 3px;
  }

  .playlist-item .song p:nth-child(2) {
    font-weight: 300;
    opacity: 0.5;
  }

  .playlist-item i {
    font-size: 1.2rem;
    color: var(--light-clr);
  }

  .active-playlist-item {
    background-color: var(--active-clr);
    border-radius: 5px;
  }

  /** PLAYER CONTROL */

  .player {
    position: sticky;
    left: 0;
    bottom: 0;
    width: 100%;
    border: 1px solid rgba(255, 255, 255, 0.3);
    border-radius: 10px;
    background: var(--player-bg);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    box-shadow: 2px 2px 10px 2px rgba(0, 0, 0, 0.25);
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 10px 0 5px;
    z-index: 15;
    overflow: hidden;
  }

  /** Player Buttons */

  .controls {
    display: flex;
    justify-content: center;
    align-items: center;
    column-gap: 25px;
  }

  .controls i {
    font-size: 1.7rem;
    cursor: pointer;
    transform: scale(1);
    will-change: transform;
  }

  #playPauseBtn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 45px;
    aspect-ratio: 1/1;
    margin: 5px 0;
    color: var(--primary-clr);
    outline: 0;
    background: var(--light-clr);
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    box-shadow: 0 10px 20px rgba(5, 36, 28, 0.3);
    font-size: 1.5rem;
    transform: scale(1);
    will-change: transform;
  }

  #shuffleBtn:hover,
  #prevBtn:hover,
  #nextBtn:hover,
  #playPauseBtn:hover {
    transform: scale(1.05);
  }

  /** Volume */

  .volume {
    position: relative;
    display: flex;
    align-items: center;
  }

  .volume i {
    color: var(--light-clr);
    font-size: 1.2rem;
  }

  #volume-range {
    position: absolute;
    left: 30px;
    top: 7px;
    appearance: none;
    -webkit-appearance: none;
    width: 120px;
    height: 4px;
    background: var(--primary-clr);
    border-radius: 4px;
    cursor: pointer;
  }

  #volume-range::-webkit-slider-thumb {
    appearance: none;
    -webkit-appearance: none;
    background: var(--light-clr);
    width: 12px;
    aspect-ratio: 1/1;
    border-radius: 50%;
  }

  /** Progress */

  #progress-bar {
    appearance: none;
    -webkit-appearance: none;
    width: 90%;
    height: 5px;
    background: linear-gradient(
      90deg,
      var(--light-clr),
      var(--secondary-clr),
      var(--primary-clr),
      var(--secondary-clr),
      var(--light-clr)
    );
    border-radius: 4px;
    margin: 12px 0 16px;
    cursor: pointer;
  }

  #progress-bar::-webkit-slider-thumb {
    appearance: none;
    -webkit-appearance: none;
    background: var(--light-clr);
    width: 15px;
    aspect-ratio: 1/1;
    border-radius: 50%;
  }

  /** MEDIA QUERIES */

  @media (max-width: 1300px) {
    main {
      width: 90%;
    }

    .swiper {
      width: 270px;
    }
  }

  @media (max-width: 1100px) {
    .content {
      padding: 40px 20px 20px;
    }

    .swiper {
      width: 240px;
    }

    .slider-playlist {
      grid-template-columns: 50% 50%;
    }
  }

  @media (max-width: 900px) {
    .content {
      padding: 30px 40px 20px;
      overflow-x: hidden;
    }

    .slider-playlist {
      grid-template-columns: 100%;
    }

    .swiper {
      margin: 30px auto 50px;
    }

    .player {
      width: 110%;
    }

    #volume-range {
      width: 50px;
    }
  }

  @media (max-width: 580px) {
    .content {
      overflow-x: hidden;
    }

    .swiper {
      width: 220px;
      margin: 20px auto 35px;
    }

    .playlist-item {
      margin-bottom: 10px;
    }

    .player {
      width: 115%;
    }

    .controls {
      column-gap: 15px;
    }

    .controls i {
      font-size: 1.3rem;
    }

    #playPauseBtn {
      width: 40px;
      font-size: 1.2rem;
    }

    .volume i {
      font-size: 0.9rem;
    }

    #volume-range {
      left: 20px;
      top: 6px;
      width: 40px;
    }
  }
</style>

<!-- Script del componente -->
<script is:inline>
  // InicializaciÃ³n despuÃ©s de que el DOM estÃ© listo
  document.addEventListener("DOMContentLoaded", () => {
    // Elementos del DOM
    const playlistItems = document.querySelectorAll(".playlist-item");
    const likeBtns = document.querySelectorAll(".like-btn");
    const audioPlayer = document.getElementById(
      "audioPlayer"
    ) as HTMLAudioElement;
    const volumeRange = document.getElementById(
      "volume-range"
    ) as HTMLInputElement;
    const progressBar = document.getElementById(
      "progress-bar"
    ) as HTMLInputElement;
    const playPauseBtn = document.getElementById(
      "playPauseBtn"
    ) as HTMLButtonElement;
    const playPauseIcon = document.getElementById(
      "playPauseIcon"
    ) as HTMLElement;
    const prevBtn = document.getElementById("prevBtn") as HTMLButtonElement;
    const nextBtn = document.getElementById("nextBtn") as HTMLButtonElement;
    const shuffleBtn = document.getElementById(
      "shuffleBtn"
    ) as HTMLButtonElement;

    // Estado del reproductor
    let currentSongIndex = 0;
    let isSongLoaded = false;

    // Inicializar Swiper
    const swiper = new Swiper(".swiper", {
      modules: [EffectCards],
      effect: "cards",
      cardsEffect: {
        perSlideOffset: 9,
        perSlideRotate: 3,
      },
      grabCursor: true,
      speed: 700,
      initialSlide: currentSongIndex,
    });

    // Eventos de Swiper
    swiper.on("slideChange", () => {
      const newIndex = swiper.activeIndex;
      if (newIndex !== currentSongIndex) {
        currentSongIndex = newIndex;
        loadAndPlaySong(currentSongIndex);
        updatePlayPauseIcon(true);
      }
    });

    // Funciones del reproductor
    function updateSwiperToMatchSong(index: number): void {
      if (swiper.activeIndex !== index) {
        swiper.slideTo(index);
      }
    }

    function updatePlaylistHighlight(index: number): void {
      playlistItems.forEach((item, i) => {
        if (i === index) {
          item.classList.add("active-playlist-item");
        } else {
          item.classList.remove("active-playlist-item");
        }
      });
    }

    function loadAndPlaySong(index: number): void {
      audioPlayer.src = songs[index].url;
      audioPlayer.load();
      audioPlayer
        .play()
        .then(() => {
          updatePlaylistHighlight(index);
          updateSwiperToMatchSong(index);
          isSongLoaded = true;
        })
        .catch((error) => {
          console.error("Error al reproducir la canciÃ³n:", error);
        });
    }

    function togglePlayPause(): void {
      if (!isSongLoaded) {
        loadAndPlaySong(currentSongIndex);
      } else if (audioPlayer.paused) {
        audioPlayer.play();
      } else {
        audioPlayer.pause();
      }
    }

    function updatePlayPauseIcon(isPlaying: boolean): void {
      if (isPlaying) {
        playPauseIcon.classList.replace("fa-play", "fa-pause");
      } else {
        playPauseIcon.classList.replace("fa-pause", "fa-play");
      }
    }

    function nextSong(): void {
      currentSongIndex = (currentSongIndex + 1) % songs.length;
      loadAndPlaySong(currentSongIndex);
    }

    function prevSong(): void {
      currentSongIndex = (currentSongIndex - 1 + songs.length) % songs.length;
      loadAndPlaySong(currentSongIndex);
    }

    // Event listeners
    playlistItems.forEach((item, index) => {
      item.addEventListener("click", () => {
        currentSongIndex = index;
        loadAndPlaySong(index);
      });
    });

    playPauseBtn.addEventListener("click", togglePlayPause);
    nextBtn.addEventListener("click", nextSong);
    prevBtn.addEventListener("click", prevSong);

    audioPlayer.addEventListener("timeupdate", () => {
      if (!isNaN(audioPlayer.duration)) {
        progressBar.max = audioPlayer.duration.toString();
        progressBar.value = audioPlayer.currentTime.toString();
      }
    });

    progressBar.addEventListener("input", () => {
      audioPlayer.currentTime = parseFloat(progressBar.value);
    });

    volumeRange.addEventListener("input", () => {
      audioPlayer.volume = parseFloat(volumeRange.value) / 100;
    });

    audioPlayer.addEventListener("ended", nextSong);

    shuffleBtn.addEventListener("click", () => {
      let randomIndex;
      do {
        randomIndex = Math.floor(Math.random() * songs.length);
      } while (randomIndex === currentSongIndex && songs.length > 1);

      currentSongIndex = randomIndex;
      loadAndPlaySong(currentSongIndex);
    });

    likeBtns.forEach((likeBtn) => {
      likeBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        const icon = likeBtn.querySelector("svg");
        if (icon) {
          icon.classList.toggle("fa-regular");
          icon.classList.toggle("fa-solid");
        }
      });
    });

    // Inicializar volumen
    audioPlayer.volume = parseFloat(volumeRange.value) / 100;
  });
</script>

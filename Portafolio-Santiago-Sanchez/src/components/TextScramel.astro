---
interface Props {
  t: {
    phrases: string[]; // <- AsÃ­ se tipa correctamente
  };
}
const { t } = Astro.props as Props;
// t.phrases es tu array de strings
---

<script>
  // â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
  // TextScramble
  // â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
  class TextScramble {
    el: HTMLElement;
    chars: string;
    queue: Array<{
      from: string;
      to: string;
      start: number;
      end: number;
      char?: string;
    }>;
    frame: number;
    frameRequest: number;
    resolve: () => void;

    constructor(el: HTMLElement) {
      this.el = el;
      this.chars = "!<>-_\\/[]{}â€”=+*^?#________";
      this.queue = [];
      this.frame = 0;
      this.frameRequest = 0;
      this.resolve = () => {};
      this.update = this.update.bind(this);
    }

    setText(newText: string): Promise<void> {
      const oldText = this.el.innerText;
      const length = Math.max(oldText.length, newText.length);
      const promise = new Promise<void>((resolve) => (this.resolve = resolve));
      this.queue = [];
      for (let i = 0; i < length; i++) {
        const from = oldText[i] || "";
        const to = newText[i] || "";
        const start = Math.floor(Math.random() * 40);
        const end = start + Math.floor(Math.random() * 40);
        this.queue.push({ from, to, start, end });
      }
      cancelAnimationFrame(this.frameRequest);
      this.frame = 0;
      this.update();
      return promise;
    }

    update(): void {
      let output = "";
      let complete = 0;
      for (let i = 0, n = this.queue.length; i < n; i++) {
        let { from, to, start, end, char } = this.queue[i];
        if (this.frame >= end) {
          complete++;
          output += to;
        } else if (this.frame >= start) {
          if (!char || Math.random() < 0.28) {
            char = this.randomChar();
            this.queue[i].char = char;
          }
          output += `<span class="dud">${char}</span>`;
        } else {
          output += from;
        }
      }
      this.el.innerHTML = output;
      if (complete === this.queue.length) {
        this.resolve();
      } else {
        this.frameRequest = requestAnimationFrame(this.update);
        this.frame++;
      }
    }

    randomChar(): string {
      return this.chars[Math.floor(Math.random() * this.chars.length)];
    }
  }

  // â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
  // Example
  // â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
  document.addEventListener("DOMContentLoaded", () => {
    const el = document.querySelector(".text") as HTMLElement | null; // ðŸ‘ˆ Agregamos " | null"

    if (!el) return; // ðŸ‘ˆ Si el elemento no existe, salimos de la funciÃ³n.

    const phrases = JSON.parse(el.dataset.phrases || "[]"); // ðŸ‘ˆ Convertimos la cadena en un array

    const fx = new TextScramble(el);
    let counter = 0;

    const next = () => {
      fx.setText(phrases[counter]).then(() => {
        setTimeout(next, 1000);
      });
      counter = (counter + 1) % phrases.length;
    };

    next();
  });
</script>

<div class="container">
  <div class="text" data-phrases={JSON.stringify(t.phrases ?? [])}></div>
</div>

<style>
  @import url("https://fonts.googleapis.com/css?family=Roboto+Mono:100");
  .container {
    height: 55%;
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 1rem;
  }
  .text {
    font-family: "Roboto Mono", monospace;
    font-weight: 100;
    font-size: 2rem;
    color: #fafafa;
  }
  .dud {
    color: #757575;
  }
</style>

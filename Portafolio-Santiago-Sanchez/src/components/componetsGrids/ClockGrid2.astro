---
// components/Clock.astro

// Script de cliente necesario para la animación
const now = new Date();
const initialHours = now.getHours();
const initialMinutes = now.getMinutes();
const initialSeconds = now.getSeconds();
---

<div class="clock-container">
  <svg
    width="200"
    height="200"
    role="img"
    aria-label="Reloj analógico interactivo"
  >
    <filter id="innerShadow" x="-20%" y="-20%" width="140%" height="140%">
      <feGaussianBlur in="SourceGraphic" stdDeviation="3" result="blur"
      ></feGaussianBlur>
      <feOffset in="blur" dx="2.5" dy="2.5"></feOffset>
    </filter>

    <g>
      <circle
        id="shadow"
        cx="97"
        cy="100"
        r="87"
        style="fill: rgba(0,0,0,0.1)"
        filter="url(#innerShadow)"></circle>
      <circle
        id="circle"
        cx="100"
        cy="100"
        r="80"
        style="stroke: #FFF; stroke-width: 12px; fill: var(--clock-face-color, #20B7AF)"
      ></circle>
    </g>

    <!-- Marcas horarias -->
    <g>
      {
        Array.from({ length: 12 }).map((_, i) => (
          <line
            x1="100"
            y1="30"
            x2="100"
            y2="40"
            transform={`rotate(${(i * 360) / 12} 100 100)`}
            style="stroke: #ffffff;"
          />
        ))
      }
    </g>

    <!-- Manecillas -->
    <g id="secondhand">
      {
        Array.from({ length: 5 }).map((_, i) => (
          <text
            x="100"
            y="30"
            style="
        fill: var(--second-hand-color, #C1EFED);
        font-size: 8px;
        font-weight: bold;
        text-anchor: middle;
      "
            transform={`rotate(${initialSeconds * 6 + i * 72} 100 100)`}
          >
            {now.getSeconds().toString().padStart(2, "0")}
          </text>
        ))
      }
      <animateTransform
        attributeName="transform"
        type="rotate"
        dur="60s"
        repeatCount="indefinite"
        from={`${initialSeconds * 6} 100 100`}
        to={`${initialSeconds * 6 + 360} 100 100`}></animateTransform>
    </g>

    <g>
      <line
        x1="100"
        y1="100"
        x2="100"
        y2="55"
        style="stroke-width: 3px; stroke: var(--hour-hand-color, #fffbf9);"
        id="hourhand"
        transform={`rotate(${(initialHours * 360) / 12 + initialMinutes / 2} 100 100)`}
      >
        <animateTransform
          attributeName="transform"
          type="rotate"
          dur="43200s"
          repeatCount="indefinite"
          from={`${(initialHours * 360) / 12 + initialMinutes / 2} 100 100`}
          to={`${(initialHours * 360) / 12 + initialMinutes / 2 + 360} 100 100`}
        ></animateTransform>
      </line>

      <line
        x1="100"
        y1="100"
        x2="100"
        y2="40"
        style="stroke-width: 4px; stroke: var(--minute-hand-color, #fdfdfd);"
        id="minutehand"
        transform={`rotate(${(initialMinutes * 360) / 60} 100 100)`}
      >
        <animateTransform
          attributeName="transform"
          type="rotate"
          dur="3600s"
          repeatCount="indefinite"
          from={`${(initialMinutes * 360) / 60} 100 100`}
          to={`${(initialMinutes * 360) / 60 + 360} 100 100`}
        ></animateTransform>
      </line>

      <line
        x1="100"
        y1="100"
        x2="100"
        y2="30"
        style="stroke-width: 2px; stroke: var(--second-hand-color, #C1EFED);"
        id="secondhand"
        transform={`rotate(${(initialSeconds * 360) / 60} 100 100)`}
      >
        <animateTransform
          attributeName="transform"
          type="rotate"
          dur="60s"
          repeatCount="indefinite"
          from={`${(initialSeconds * 360) / 60} 100 100`}
          to={`${(initialSeconds * 360) / 60 + 360} 100 100`}
        ></animateTransform>
      </line>
    </g>

    <circle
      id="center"
      cx="100"
      cy="100"
      r="3"
      style="fill: #128A86; stroke: #C1EFED; stroke-width: 2px;"></circle>
  </svg>
</div>

<style is:global>
  .clock-container {
    --clock-face-color: #20b7af;
    --hour-hand-color: #fffbf9;
    --minute-hand-color: #fdfdfd;
    --second-hand-color: #c1efed;

    position: relative;
    width: 200px;
    height: 200px;
    margin: 2rem auto;
  }

  .clock-container svg {
    filter: drop-shadow(0 0 10px rgba(0, 0, 0, 0.1));
    transition: transform 0.3s ease;
  }

  .clock-container:hover svg {
    transform: scale(1.05);
  }
</style>

---
interface Props {
  t: string[];
  timeSpeed?: number;
}
const { t, timeSpeed } = Astro.props;
const speed = timeSpeed ?? 2000; // Valor por defecto en caso de no definirse
const phrases = t || [];
---

<script define:vars={{ speed, phrases }}>
  // ——————————————————————————————————————————————————
  // TextScramble
  // ——————————————————————————————————————————————————
  class TextScramble {
    constructor(el) {
      this.el = el;
      this.chars = "!<>-_\\/[]{}—=+*^?#________";
      this.queue = [];
      this.frame = 0;
      this.frameRequest = 0;
      this.resolve = () => {};
      this.update = this.update.bind(this);
    }

    setText(newText) {
      const oldText = this.el.innerText;
      const length = Math.max(oldText.length, newText.length);
      const promise = new Promise((resolve) => (this.resolve = resolve));
      this.queue = [];
      for (let i = 0; i < length; i++) {
        const from = oldText[i] || "";
        const to = newText[i] || "";
        const start = Math.floor(Math.random() * 40);
        const end = start + Math.floor(Math.random() * 40);
        this.queue.push({ from, to, start, end });
      }
      cancelAnimationFrame(this.frameRequest);
      this.frame = 0;
      this.update();
      return promise;
    }

    update() {
      let output = "";
      let complete = 0;
      for (let i = 0, n = this.queue.length; i < n; i++) {
        let { from, to, start, end, char } = this.queue[i];
        if (this.frame >= end) {
          complete++;
          output += to;
        } else if (this.frame >= start) {
          if (!char || Math.random() < 0.28) {
            char = this.randomChar();
            this.queue[i].char = char;
          }
          output += `<span class="dud">${char}</span>`;
        } else {
          output += from;
        }
      }
      this.el.innerHTML = output;
      if (complete === this.queue.length) {
        this.resolve();
      } else {
        this.frameRequest = requestAnimationFrame(this.update);
        this.frame++;
      }
    }

    randomChar() {
      return this.chars[Math.floor(Math.random() * this.chars.length)];
    }
  }

  // ——————————————————————————————————————————————————
  // Example
  // ——————————————————————————————————————————————————
  document.addEventListener("DOMContentLoaded", () => {
    const el = document.querySelector(".text");
    if (!el) return; // Si el elemento no existe, salimos de la función.

    // Antes de iniciar el efecto, establecemos un tamaño fijo
    const container = document.querySelector(".text-container");

    // Iniciar efecto
    const fx = new TextScramble(el);
    let counter = 0;
    const next = () => {
      fx.setText(phrases[counter]).then(() => {
        setTimeout(next, speed);
      });
      counter = (counter + 1) % phrases.length;
    };
    next();
  });
</script>

<div class="container">
  <div class="text-container">
    <div class="text"></div>
  </div>
</div>

<style>
  @import url("https://fonts.googleapis.com/css?family=Roboto+Mono:100");
  .container {
    width: 100%;
    flex-grow: 1;
    max-width: 1000px;
    max-height: 500px;
    margin: 0 auto;
    display: flex;
    justify-content: flex-start; /* Cambiado a flex-start para alinear a la izquierda */
    align-items: center;
    padding: 1rem;
    box-sizing: border-box;
  }

  .text-container {
    display: flex;
    justify-content: flex-start; /* Cambiado a flex-start para alinear a la izquierda */
    align-items: center;
    width: 100%;
    max-width: 100%;
    height: 4em; /* Altura fija de 4 líneas de texto aproximadamente */
    overflow: hidden; /* Crucial: oculta todo lo que exceda este contenedor */
    padding: 0.5rem;
    box-sizing: border-box;
    position: relative; /* Para posicionamiento absoluto del texto */
  }

  .text {
    position: absolute; /* Saca el texto del flujo normal */
    width: 100%;
    max-height: 100%;
    text-align: left; /* Cambiado a left para alinear a la izquierda */
    white-space: normal; /* Permite saltos de línea naturales */
    overflow: hidden; /* Oculta cualquier texto que exceda */
    text-overflow: ellipsis; /* Muestra puntos suspensivos para texto cortado */
    display: -webkit-box; /* Para limitar a un número específico de líneas */
    -webkit-line-clamp: 3; /* Máximo de líneas a mostrar */
    -webkit-box-orient: vertical; /* Orientación del texto */
    line-height: 1.3; /* Espaciado entre líneas para mejor legibilidad */
    font-family: inherit;
    font-weight: inherit;
    font-size: inherit;
    color: inherit;
    left: 0; /* Asegura que el texto comience desde la izquierda */
  }

  .dud {
    color: rgba(255, 255, 255, 0.5);
  }

  /* Ajustes específicos para dispositivos móviles */
  @media screen and (max-width: 768px) {
    .text-container {
      height: 3.5em; /* Altura ajustada para móviles */
    }

    .text {
      -webkit-line-clamp: 2; /* Menos líneas en móviles */
    }
  }
</style>
